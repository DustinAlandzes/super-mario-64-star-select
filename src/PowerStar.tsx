/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/PowerStar.glb --types --transform
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import {useFrame} from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    star_1: THREE.Mesh
    star_2: THREE.Mesh
  }
  materials: {
    Material_065_713E77D_c_bmp: THREE.MeshStandardMaterial
    Material_063_3ED452ED_c_bmp: THREE.MeshStandardMaterial
  }
}

export default function PowerStar(props: JSX.IntrinsicElements['group'] | {active: boolean}) {
  const { nodes, materials } = useGLTF('/PowerStar-transformed.glb') as GLTFResult

  const ref = useRef()
  useFrame((state, delta, frame) => {
    if (props.active) {
      ref.current.rotation.y += 2 * delta;
    } else {
      ref.current.rotation.y = 0;
    }
  })

  return (
    <group {...props} dispose={null} ref={ref}>
      <group rotation={[Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes.star_1.geometry} material={materials.Material_065_713E77D_c_bmp} />
        <mesh geometry={nodes.star_2.geometry} material={materials.Material_063_3ED452ED_c_bmp} />
      </group>
    </group>
  )
}

useGLTF.preload('/PowerStar-transformed.glb')
